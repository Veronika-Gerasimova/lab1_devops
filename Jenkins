pipeline {
    agent any

    environment {
        JAVA_TOOL_OPTIONS = "-Dfile.encoding=UTF-8"
        PYTHON_PATH = 'C:\\Users\\geras\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'
        VENV_DIR = 'venv'
        APP_NAME = 'lab1_devops'
        APP_PORT = '5000'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Getting code from repository...'
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[
                              url: 'https://github.com/Veronika-Gerasimova/lab1_devops',
                              credentialsId: 'github-token2'
                          ]]])
                script {
                    echo "Current branch: ${env.BRANCH_NAME}"
                    echo "Git commit: ${env.GIT_COMMIT}"
                }
            }
        }

        stage('Setup Virtual Environment') {
            steps {
                echo 'Creating virtual environment...'
                bat "\"${env.PYTHON_PATH}\" -m venv %VENV_DIR%"
                bat ".\\%VENV_DIR%\\Scripts\\python.exe -m pip install --upgrade pip"
                bat ".\\%VENV_DIR%\\Scripts\\pip.exe install -r requirements.txt"
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                bat ".\\%VENV_DIR%\\Scripts\\pytest.exe -q --disable-warnings --maxfail=1"
            }
            post {
                always {
                    echo 'Tests completed'
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'origin/main'
                    allOf {
                        not { branch 'dev' }
                        not { branch 'feature' }
                    }
                }
            }
            steps {
                echo 'Deploying to production environment with Docker...'
                bat '''
                    setlocal enabledelayedexpansion
                    
                    echo Checking Docker installation...
                    docker --version
                    if %errorlevel% neq 0 (
                        echo Docker is not installed or not in PATH.
                        echo Please install Docker Desktop for Windows.
                        echo Download from: https://www.docker.com/products/docker-desktop
                        exit /b 1
                    )
                    
                    echo Docker is available!
                    echo.
                    
                    echo Stopping existing containers...
                    docker-compose down 2>nul
                    
                    echo Building new Docker image...
                    docker-compose build --no-cache
                    
                    echo Starting application with Docker...
                    docker-compose up -d
                    
                    echo Waiting for application to start...
                    timeout /t 15 /nobreak >nul
                    
                    echo Checking application health...
                    for /L %%i in (1,1,20) do (
                        echo Testing connection attempt %%i...
                        curl -s -o nul -w "%%{http_code}" http://localhost:%APP_PORT%/ > temp_status.txt
                        set /p status=<temp_status.txt
                        del temp_status.txt
                        if "!status!"=="200" (
                            echo Application successfully started and responding to requests!
                            echo.
                            echo ========================================
                            echo    DEPLOYMENT SUCCESSFUL!
                            echo ========================================
                            echo.
                            echo Application URLs:
                            echo   - Direct: http://localhost:%APP_PORT%/
                            echo   - Via Nginx: http://localhost:80/
                            echo   - Network: http://10.255.0.1:%APP_PORT%/
                            echo.
                            echo Container status:
                            docker-compose ps
                            echo.
                            echo Docker containers will continue running after pipeline completion!
                            echo Application will auto-restart on system reboot.
                            echo.
                            echo Management commands:
                            echo   docker-compose ps          - Check status
                            echo   docker-compose logs -f     - View logs
                            echo   docker-compose restart     - Restart app
                            echo   docker-compose down        - Stop app
                            echo.
                            
                            echo Creating management script...
                            echo @echo off > docker-manage.bat
                            echo echo Docker Flask App Manager >> docker-manage.bat
                            echo echo ======================== >> docker-manage.bat
                            echo echo. >> docker-manage.bat
                            echo echo Container status: >> docker-manage.bat
                            echo docker-compose ps >> docker-manage.bat
                            echo echo. >> docker-manage.bat
                            echo echo Application URLs: >> docker-manage.bat
                            echo echo   - Direct: http://localhost:%APP_PORT%/ >> docker-manage.bat
                            echo echo   - Via Nginx: http://localhost:80/ >> docker-manage.bat
                            echo echo. >> docker-manage.bat
                            echo echo Commands: >> docker-manage.bat
                            echo echo   docker-compose ps          - Check status >> docker-manage.bat
                            echo echo   docker-compose logs -f     - View logs >> docker-manage.bat
                            echo echo   docker-compose restart     - Restart app >> docker-manage.bat
                            echo echo   docker-compose down        - Stop app >> docker-manage.bat
                            echo echo   docker-compose up -d       - Start app >> docker-manage.bat
                            echo echo. >> docker-manage.bat
                            echo pause >> docker-manage.bat
                            
                            echo Management script created: docker-manage.bat
                            echo.
                            echo Docker deployment completed successfully!
                            echo Application will remain running after pipeline completion.
                            goto :success
                        )
                        echo Attempt %%i: HTTP status !status!, application still starting...
                        timeout /t 3 /nobreak >nul
                    )
                    echo ERROR: Application not responding after 20 attempts!
                    echo Container logs:
                    docker-compose logs flask-app
                    echo.
                    echo Stopping failed deployment...
                    docker-compose down
                    exit /b 1
                    :success
                    endlocal
                '''
                echo 'Docker deployment completed successfully!'
                echo 'Application will continue running after pipeline completion.'
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline completed successfully!'
            echo 'Docker containers are running and application is accessible.'
            echo 'Application URLs:'
            echo '  - Direct: http://localhost:5000/'
            echo '  - Via Nginx: http://localhost:80/'
            echo '  - Network: http://10.255.0.1:5000/'
            echo ''
            echo 'Management commands:'
            echo '  docker-compose ps          - Check status'
            echo '  docker-compose logs -f     - View logs'
            echo '  docker-compose restart     - Restart app'
            echo '  docker-compose down        - Stop app'
            echo ''
            echo 'Application will continue running after pipeline completion!'
            
            withCredentials([string(credentialsId: 'github-token2', variable: 'TOKEN')]) {
                bat """
                    curl -H "Authorization: token %TOKEN%" ^
                         -H "Accept: application/vnd.github+json" ^
                         -X POST ^
                         https://api.github.com/repos/Veronika-Gerasimova/lab1_devops/statuses/%GIT_COMMIT% ^
                         -d "{\\"state\\":\\"success\\",\\"context\\":\\"Jenkins\\",\\"description\\":\\"Build succeeded - App running on Docker\\"}"
                """
            }
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
            echo 'Docker containers have been stopped.'
            
            withCredentials([string(credentialsId: 'github-token2', variable: 'TOKEN')]) {
                bat """
                    curl -H "Authorization: token %TOKEN%" ^
                         -H "Accept: application/vnd.github+json" ^
                         -X POST ^
                         https://api.github.com/repos/Veronika-Gerasimova/lab1_devops/statuses/%GIT_COMMIT% ^
                         -d "{\\"state\\":\\"failure\\",\\"context\\":\\"Jenkins\\",\\"description\\":\\"Build failed\\"}"
                """
            }
        }
    }
}
