pipeline {
    agent { label 'windows' }

    environment {
        PYTHON_PATH = 'C:\\Users\\geras\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'
        VENV_DIR = 'venv'
        APP_NAME = 'lab1_devops'
        DEV_PORT = '5001'
        PROD_PORT = '5000'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Получение кода из репозитория...'
                checkout scm
            }
        }

        stage('Setup Virtual Environment') {
            steps {
                echo 'Создание виртуального окружения...'
                bat "\"${env.PYTHON_PATH}\" -m venv %VENV_DIR%"
                bat ".\\%VENV_DIR%\\Scripts\\python.exe -m pip install --upgrade pip"
                bat ".\\%VENV_DIR%\\Scripts\\pip.exe install -r requirements.txt"
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Запуск тестов...'
                bat ".\\%VENV_DIR%\\Scripts\\pytest.exe -q --disable-warnings --maxfail=1"
            }
            post {
                always {
                    echo 'Тесты завершены'
                }
            }
        }

        stage('Deploy to Dev') {
            when {
                expression {
                    def branch = bat(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Current branch: ${branch}"
                    return branch == 'dev'
                }
            }
            steps {
                echo 'Деплой в dev окружение...'
                bat "taskkill /F /IM python.exe 2>nul || echo Нет запущенных процессов"
                bat "set PYTHONUNBUFFERED=1"
                bat "start /B .\\%VENV_DIR%\\Scripts\\python.exe app.py --port=%DEV_PORT%"
                bat "timeout /t 3 /nobreak >nul"
                bat "curl -s http://localhost:%DEV_PORT%/health || echo 'Приложение еще запускается...'"
                echo 'Dev deployment completed'
            }
        }

        stage('Deploy to Production') {
            when {
                expression {
                    def branch = bat(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Current branch: ${branch}"
                    return branch == 'main'
                }
            }
            steps {
                echo 'Деплой в prod окружение...'
                bat "taskkill /F /IM python.exe 2>nul || echo Нет запущенных процессов"
                bat "set PYTHONUNBUFFERED=1"
                bat "start /B .\\%VENV_DIR%\\Scripts\\python.exe app.py --port=%PROD_PORT%"
                bat "timeout /t 3 /nobreak >nul"
                bat "curl -s http://localhost:%PROD_PORT%/health || echo 'Приложение еще запускается...'"
                echo 'Production deployment completed'
            }
        }
    }

    post {
        always {
            echo 'Pipeline завершен'
        }
        success {
            echo 'Pipeline выполнен успешно!'
        }
        failure {
            echo 'Pipeline завершился с ошибкой!'
        }
    }
}
