pipeline {
    agent any

    environment {
        JAVA_TOOL_OPTIONS = "-Dfile.encoding=UTF-8"
        PYTHON_PATH = 'C:\\Users\\geras\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'
        VENV_DIR = 'venv'
        APP_NAME = 'lab1_devops'
        APP_PORT = '8000'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Getting code from repository...'
                checkout([$class: 'GitSCM',
                          branches: [[name: "*/${env.BRANCH_NAME}"]],
                          extensions: [[ $class: 'LocalBranch', localBranch: '**' ]],
                          userRemoteConfigs: [[
                              url: 'https://github.com/Veronika-Gerasimova/lab1_devops',
                              credentialsId: 'github-token2'
                          ]]])
                script {
                    echo "Current branch: ${env.BRANCH_NAME}"
                    echo "Git commit: ${env.GIT_COMMIT}"
                }
            }
        }

        stage('Set Build Context') {
            steps {
                script {
                    def parents = bat(returnStdout: true, script: 'git show -s --format=%p HEAD').trim()
                    def isMerge = parents.split().size() > 1
                    env.IS_MERGE_COMMIT = isMerge ? 'true' : 'false'
                    echo "Parents: ${parents}"
                    echo "IS_MERGE_COMMIT=${env.IS_MERGE_COMMIT}"
                }
            }
        }

        stage('Setup Virtual Environment') {
            steps {
                echo 'Creating virtual environment...'
                bat "\"${env.PYTHON_PATH}\" -m venv %VENV_DIR%"
                bat ".\\%VENV_DIR%\\Scripts\\python.exe -m pip install --upgrade pip"
                bat ".\\%VENV_DIR%\\Scripts\\pip.exe install -r requirements.txt"
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                bat ".\\%VENV_DIR%\\Scripts\\pytest.exe -q --disable-warnings --maxfail=1"
            }
            post {
                always {
                    echo 'Tests completed'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def IMAGE = "veronikagerasimova/devops-app"
                    def TAG = env.BRANCH_NAME ? env.BRANCH_NAME.replaceAll('[^a-zA-Z0-9_.-]','-') : 'latest'
                    def IMAGE_TAG = "${IMAGE}:${TAG}"
                    def IMAGE_LATEST = "${IMAGE}:latest"
                    echo "Building Docker image: ${IMAGE_TAG}"
                }
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_TOKEN')]) {
                    bat '''
                        docker version
                        echo Logging in to Docker Hub...
                        echo %DOCKERHUB_TOKEN% | docker login -u %DOCKERHUB_USER% --password-stdin
                        echo Building image...
                        docker build -t veronikagerasimova/devops-app:%BRANCH_NAME% -t veronikagerasimova/devops-app:latest .
                        echo Pushing images...
                        docker push veronikagerasimova/devops-app:%BRANCH_NAME%
                        docker push veronikagerasimova/devops-app:latest
                        echo Docker push completed.
                    '''
                }
            }
        }

        stage('Deploy to Production') {
            when {
                allOf {
                    branch 'main'
                    expression { return env.IS_MERGE_COMMIT == 'true' }
                }
            }
            steps {
                echo 'Deploying to production environment...'
                bat '''
                    setlocal enabledelayedexpansion
                    echo Stopping previous Python processes...
                    taskkill /F /IM python.exe 2>nul || echo No running Python processes
                    
                    echo Creating startup script...
                    echo @echo off > start_app.bat
                    echo cd /d "%%~dp0" >> start_app.bat
                    echo echo Starting Flask application... >> start_app.bat
                    echo .\\%VENV_DIR%\\Scripts\\python.exe app.py >> start_app.bat
                    echo pause >> start_app.bat
                    
                    echo Creating stop script...
                    echo @echo off > stop_app.bat
                    echo echo Stopping Flask application... >> stop_app.bat
                    echo taskkill /F /IM python.exe 2^>nul ^|^| echo No Python processes found >> stop_app.bat
                    echo echo Application stopped. >> stop_app.bat
                    echo pause >> stop_app.bat
                    
                    echo Starting application on port %APP_PORT%...
                    start /B /MIN start_app.bat
                    
                    echo Waiting for application to start...
                    timeout /t 8 /nobreak >nul
                    
                    echo Checking application health...
                    for /L %%i in (1,1,15) do (
                        echo Testing connection attempt %%i...
                        curl -s -o nul -w "%%{http_code}" http://localhost:%APP_PORT%/ > temp_status.txt
                        set /p status=<temp_status.txt
                        del temp_status.txt
                        if "!status!"=="200" (
                    echo Application successfully started and responding to requests!
                    
                    echo Creating Windows scheduled task for auto-startup...
                    schtasks /create /tn "FlaskApp_%APP_NAME%" /tr "%%~dp0start_app.bat" /sc onstart /ru "SYSTEM" /f 2>nul || echo Task creation failed or already exists
                    
                    echo Deployment completed! Application is running and will auto-start on system reboot.
                    echo.
                    echo Application URLs:
                    echo   - Local: http://localhost:%APP_PORT%/
                    echo   - Network: http://10.255.0.1:%APP_PORT%/
                    echo.
                    echo Management scripts created:
                    echo   - start_app.bat (start application)
                    echo   - stop_app.bat (stop application)
                    echo.
                    
                    echo Creating deployment README...
                    echo # Flask Application Deployment > DEPLOYMENT_README.md
                    echo. >> DEPLOYMENT_README.md
                    echo ## Application URLs >> DEPLOYMENT_README.md
                    echo - Local: http://localhost:%APP_PORT%/ >> DEPLOYMENT_README.md
                    echo - Network: http://10.255.0.1:%APP_PORT%/ >> DEPLOYMENT_README.md
                    echo. >> DEPLOYMENT_README.md
                    echo ## Management Scripts >> DEPLOYMENT_README.md
                    echo - start_app.bat: Start the application >> DEPLOYMENT_README.md
                    echo - stop_app.bat: Stop the application >> DEPLOYMENT_README.md
                    echo. >> DEPLOYMENT_README.md
                    echo ## Auto-startup >> DEPLOYMENT_README.md
                    echo The application is configured to start automatically on system reboot via Windows Scheduled Task. >> DEPLOYMENT_README.md
                    echo Task name: FlaskApp_%APP_NAME% >> DEPLOYMENT_README.md
                    echo. >> DEPLOYMENT_README.md
                    
                    goto :success
                        )
                        echo Attempt %%i: HTTP status !status!, application still starting...
                        timeout /t 3 /nobreak >nul
                    )
                    echo ERROR: Application not responding after 15 attempts!
                    exit /b 1
                    :success
                    endlocal
                '''
                echo 'Production deployment completed successfully!'
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline completed successfully!'
            withCredentials([string(credentialsId: 'github-token2', variable: 'TOKEN')]) {
                bat """
                    curl -H "Authorization: token %TOKEN%" ^
                         -H "Accept: application/vnd.github+json" ^
                         -X POST ^
                         https://api.github.com/repos/Veronika-Gerasimova/lab1_devops/statuses/%GIT_COMMIT% ^
                         -d "{\"state\":\"success\",\"context\":\"Jenkins\",\"description\":\"Build succeeded\"}"
                """
            }
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
            withCredentials([string(credentialsId: 'github-token2', variable: 'TOKEN')]) {
                bat """
                    curl -H "Authorization: token %TOKEN%" ^
                         -H "Accept: application/vnd.github+json" ^
                         -X POST ^
                         https://api.github.com/repos/Veronika-Gerasimova/lab1_devops/statuses/%GIT_COMMIT% ^
                         -d "{\"state\":\"failure\",\"context\":\"Jenkins\",\"description\":\"Build failed\"}"
                """
            }
        }
    }
}
