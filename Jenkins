pipeline {
    agent any

    environment {
        PYTHON_PATH = 'C:\\Users\\geras\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'
        VENV_DIR = "venv"
    }

    options {
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Quality Test') {
            steps {
                echo "Running flake8..."
                bat """
                   "%PYTHON_PATH%" -m venv %VENV_DIR%
                   call %VENV_DIR%\\Scripts\\activate && "%PYTHON_PATH%" -m pip install --upgrade pip
                   call %VENV_DIR%\\Scripts\\activate && "%PYTHON_PATH%" -m pip install flake8
                   call %VENV_DIR%\\Scripts\\activate && "%PYTHON_PATH%" -m flake8 app.py test_app.py || exit 0
                """
            }
        }

        stage('Unit Test') {
            steps {
                echo "Running pytest..."
                bat """
                   call %VENV_DIR%\\Scripts\\activate
                   "%PYTHON_PATH%" -m pip install flask pytest
                   if not exist reports mkdir reports
                   "%PYTHON_PATH%" -m pytest --junitxml=reports\\junit.xml
                """
            }
            post {
                always {
                    junit 'reports/junit.xml'
                }
            }
        }

        stage('Rebuild / Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo "Deploying Flask app..."
                bat """
                   call %VENV_DIR%\\Scripts\\activate
                   "%PYTHON_PATH%" -m pip install -r requirements.txt || "%PYTHON_PATH%" -m pip install flask pytest

                   echo Killing old Flask if running...
                   for /F "tokens=5" %%i in ('netstat -ano ^| findstr :5000') do taskkill /F /PID %%i || exit 0

                   echo Starting Flask app...
                   start "" /B cmd /c "call %VENV_DIR%\Scripts\activate && flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1"
                """
            }
        }

        stage('Acceptance Tests') {
            when {
                branch 'main'
            }
            steps {
                echo "Checking if Flask app is up..."
                bat """
                   timeout /T 10 >nul
                   curl http://127.0.0.1:5000/ || exit 1
                """
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline finished SUCCESS"
        }
        failure {
            echo "❌ Pipeline FAILED"
        }
    }
}
