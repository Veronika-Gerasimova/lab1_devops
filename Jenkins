pipeline {
    agent any

    environment {
        JAVA_TOOL_OPTIONS = "-Dfile.encoding=UTF-8"
        PYTHON_PATH = 'C:\\Users\\geras\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'
        VENV_DIR = 'venv'
        APP_NAME = 'lab1_devops'
        APP_PORT = '5000'
        REPO_URL = 'https://github.com/Veronika-Gerasimova/lab1_devops'
        CREDENTIALS_ID = 'github-token2'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Current branch: ${env.BRANCH_NAME}"
                    if (env.BRANCH_NAME == 'main') {
                        echo 'Merging all branches into main...'
                        checkout([$class: 'GitSCM',
                                  branches: [[name: '*/main']],
                                  userRemoteConfigs: [[url: "${env.REPO_URL}", credentialsId: "${env.CREDENTIALS_ID}"]]])
                        // Получаем список всех веток
                        def branches = bat(script: 'git branch -r', returnStdout: true).trim().split("\r\n")
                        branches.each { b ->
                            if (!b.contains('main') && !b.contains('HEAD')) {
                                def branchName = b.replace('origin/', '').trim()
                                echo "Merging ${branchName} into main..."
                                bat "git fetch origin ${branchName}"
                                bat "git merge origin/${branchName} --no-ff -m \"Merge branch '${branchName}' into main\""
                            }
                        }
                        // Пушим изменения в main
                        bat "git push origin main"
                    } else {
                        echo 'Checking out feature/dev branch...'
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "*/${env.BRANCH_NAME}"]],
                                  userRemoteConfigs: [[url: "${env.REPO_URL}", credentialsId: "${env.CREDENTIALS_ID}"]]])
                    }
                }
            }
        }

        stage('Setup Virtual Environment') {
            steps {
                echo 'Creating virtual environment...'
                bat "\"${env.PYTHON_PATH}\" -m venv %VENV_DIR%"
                bat ".\\%VENV_DIR%\\Scripts\\python.exe -m pip install --upgrade pip"
                bat ".\\%VENV_DIR%\\Scripts\\pip.exe install -r requirements.txt"
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                bat ".\\%VENV_DIR%\\Scripts\\pytest.exe -q --disable-warnings --maxfail=1"
            }
            post {
                always {
                    echo 'Tests completed'
                }
            }
        }

        stage('Push Changes to Branches') {
            when {
                expression { env.BRANCH_NAME != 'main' }
            }
            steps {
                echo "Pushing changes to branch ${env.BRANCH_NAME}..."
                bat "git add ."
                bat "git commit -m \"Jenkins automated commit on branch ${env.BRANCH_NAME}\" || echo No changes to commit"
                bat "git push origin ${env.BRANCH_NAME}"
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to production environment...'
                // Здесь оставляем ваш блок деплоя без изменений
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs.'
        }
    }
}
