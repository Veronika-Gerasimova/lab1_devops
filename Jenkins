pipeline {
    agent any

    environment {
        PY_BIN = "python3"
        DOCKER_REGISTRY = "docker.io"                    // адрес реестра
        IMAGE_NAME = "veronika-gerasimova/lab1_devops"   // имя образа
        REGISTRY_CREDENTIALS = "dockerhub-creds"         // ID credentials в Jenkins
    }

    triggers {
        githubPush() 
    }

    options {
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checkout branch: ${env.BRANCH_NAME}"
                checkout scm
            }
        }

        stage('Quality Test') {
            steps {
                echo "Running quality checks (flake8)..."
                sh """
                   ${PY_BIN} -m venv venv
                   . venv/bin/activate
                   pip install --upgrade pip
                   pip install flake8
                   flake8 app.py test_app.py || true
                """
            }
        }

        stage('Unit Test') {
            steps {
                echo "Running pytest..."
                sh """
                   . venv/bin/activate
                   pip install -r requirements.txt || pip install flask pytest
                   mkdir -p reports
                   pytest --junitxml=reports/junit.xml
                """
            }
            post {
                always {
                    junit 'reports/junit.xml'
                }
            }
        }

        stage('Security Test') {
            steps {
                echo "Running security checks (bandit)..."
                sh """
                   . venv/bin/activate
                   pip install bandit
                   bandit -r . || true
                """
            }
        }

        stage('Build') {
            when {
                anyOf { branch 'dev'; branch 'main' }
            }
            steps {
                echo "Building Docker image..."
                script {
                    def tag = (env.BRANCH_NAME == 'dev') ? 'dev' : 'latest'
                    sh "docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${tag} ."
                }
            }
        }

        stage('Push') {
            when {
                anyOf { branch 'dev'; branch 'main' }
            }
            steps {
                script {
                    def tag = (env.BRANCH_NAME == 'dev') ? 'dev' : 'latest'
                    docker.withRegistry("https://${DOCKER_REGISTRY}", REGISTRY_CREDENTIALS) {
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${tag}"
                    }
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo "Deploying to production..."
                // Здесь добавьте реальные команды (ssh, ansible, kubectl и т.д.)
                sh 'echo "Simulated deploy step"'
            }
        }

        stage('Acceptance Tests') {
            when {
                branch 'main'
            }
            steps {
                echo "Running acceptance (smoke) tests..."
                sh 'curl -s http://localhost:5000/ || true'
            }
        }
    }

    post {
        success {
            echo "Pipeline finished SUCCESS"
        }
        failure {
            echo "Pipeline FAILED"
        }
    }
}
